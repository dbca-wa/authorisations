"""
Django settings for DBCA Authorisations project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    CSRF_COOKIE_SECURE=(bool, True),
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = [
    'localhost',
]

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
]

ALLOWED_HOST_UAT = env('ALLOWED_HOST_UAT')
if ALLOWED_HOST_UAT:
    ALLOWED_HOSTS.append(ALLOWED_HOST_UAT)
    CSRF_TRUSTED_ORIGINS.append(f'https://{ALLOWED_HOST_UAT}')

ALLOWED_HOST_PROD = env('ALLOWED_HOST_PROD')
if ALLOWED_HOST_PROD:
    ALLOWED_HOSTS.append(ALLOWED_HOST_PROD)
    CSRF_TRUSTED_ORIGINS.append(f'https://{ALLOWED_HOST_PROD}')

# CSRF and Session settings
CSRF_COOKIE_NAME = env('CSRF_COOKIE_NAME')  # Set custom CSRF cookie name

if not DEBUG:
    SESSION_COOKIE_DOMAIN = env('CSRF_COOKIE_DOMAIN')
    CSRF_COOKIE_DOMAIN = env('CSRF_COOKIE_DOMAIN')

    # Ensure SameSite attribute allows cross-site requests if needed
    CSRF_COOKIE_SAMESITE = "None"
    SESSION_COOKIE_SAMESITE = "None"
    # Secure attribute is also recommended if using HTTPS
    CSRF_COOKIE_SECURE = env('CSRF_COOKIE_SECURE')
    SESSION_COOKIE_SECURE = env('CSRF_COOKIE_SECURE')


# Application definition
INSTALLED_APPS = [
    'django_vite',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'applications',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': env.db_url(),
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-au'

TIME_ZONE = env('TIME_ZONE')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# The URL prefix for static files served from STATIC_ROOT
STATIC_URL = 'static/'

# The directory where the collected static files will be served from
STATIC_ROOT = BASE_DIR / "static"

# The source of static files when doing collectstatic
STATICFILES_DIRS = [
    BASE_DIR / "assets",
]

# Original frontend build directory - doesn't exist in docker environment
FRONTEND_DIST = Path(os.path.abspath(BASE_DIR / "../frontend/dist"))
if FRONTEND_DIST.exists():
    STATICFILES_DIRS.append(FRONTEND_DIST)

# Frontend manifest.json path 
# (to avoid a warning while doing "collectstatic" the first time)
MANIFEST_PATH = None
if os.path.exists(FRONTEND_DIST / 'manifest.json'):
    MANIFEST_PATH = FRONTEND_DIST / 'manifest.json'
elif os.path.exists(BASE_DIR / 'assets' / 'manifest.json'):
    MANIFEST_PATH = BASE_DIR / 'assets' / 'manifest.json'

DJANGO_VITE = {
  'default': {
    'dev_mode': DEBUG,
    'manifest_path':  MANIFEST_PATH,
  }
}