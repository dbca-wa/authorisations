# =================== BUILDER FRONTEND ===================
FROM node:23-alpine AS builder_frontend

# Copy the project into temporary folder for now
COPY frontend /tmp/frontend/

# Install frontend dependencies & build assets
RUN cd /tmp/frontend; npm install; npm run build

# =================== BUILDER BACKEND ===================
FROM python:3.13-slim AS builder_backend

## Environment setup
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Australia/Perth

## Install system upgrades & dependencies
RUN apt-get clean
RUN apt-get update
RUN apt-get upgrade -y
RUN update-ca-certificates
RUN apt-get install --no-install-recommends -y curl wget vim htop procps sudo

# Update timezone
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=/etc/poetry python3 -
ENV PATH="${PATH}:/etc/poetry/bin"

# DBCA default Scripts
RUN wget https://raw.githubusercontent.com/dbca-wa/wagov_utils/main/wagov_utils/bin/default_script_installer.sh -O /tmp/default_script_installer.sh
RUN chmod 755 /tmp/default_script_installer.sh
RUN /tmp/default_script_installer.sh

## USER
# Create a non-root user
RUN groupadd -g 5000 appuser
RUN useradd --gid 5000 --uid 5000 --create-home --home-dir /home/appuser --no-log-init appuser
RUN echo 'alias ls="ls -lah --color=auto"' >> /home/appuser/.bash_aliases

# Create the app directory
RUN mkdir /app
RUN chown -R appuser:appuser /app

# =================== RUNTIME ===================
FROM builder_backend

# Switch to non-root user
USER appuser
WORKDIR /app

# Copy backend source to container
COPY --chown=appuser:appuser backend /app/

# Copy frontend built assets before collecting static
COPY --from=builder_frontend --chown=appuser:appuser /tmp/frontend/dist /app/assets

# Create virtualenv & install backend dependencies
# (this will always create the local `.venv` folder as per `poetry.toml` config)
RUN poetry install --no-root --no-interaction --no-ansi

# Use the virtualenv python from now on
ENV PATH="/app/.venv/bin:${PATH}"
ENV PYTHONPATH=/app
WORKDIR /app

# Collect static (using the virtualenv python)
RUN python manage.py collectstatic --noinput

# Expose django app on port 8080
EXPOSE 8080

HEALTHCHECK --interval=1m --timeout=5s --start-period=10s --retries=3 CMD ["wget", "-q", "-O", "-", "http://localhost:8080/"]

# Launch gunicorn
ENTRYPOINT ["/app/entrypoint.sh"]

# Uncomment if you want to pause at some step
# (comment out until the pasue step)
# ENTRYPOINT ["sleep", "infinity"]